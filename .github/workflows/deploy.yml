# Workflow name: Builds Flutter web app, creates Docker image, pushes to AWS ECR, and updates ECS service
name: Build Flutter Web and Push to ECR

# Trigger: Runs on push to the 'main' branch
on:
  push:
    branches: [ "main" ]

# Defines a single job for building and deploying
jobs:
  build_and_push:
    # Use the latest Ubuntu runner for compatibility with Flutter and AWS CLI
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code to the runner
      # Uses the official checkout action to fetch the latest code from the main branch
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Install Flutter on the runner
      # Uses the subosito/flutter-action to set up Flutter with the stable version
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          channel: 'stable'

      # Step 3: Install Flutter dependencies
      # Runs 'flutter pub get' to fetch dependencies defined in pubspec.yaml
      - name: Flutter pub get
        run: flutter pub get

      # Step 4: Build the Flutter web app
      # Runs 'flutter build web --release' to generate optimized web assets in build/web
      - name: Build web
        run: flutter build web --release

      # Step 5: Configure AWS credentials
      # Uses aws-actions/configure-aws-credentials to authenticate with AWS using IAM user credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # IAM user's access key (stored in GitHub Secrets)
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # IAM user's secret key (stored in GitHub Secrets)
          aws-region: ${{ secrets.AWS_REGION }} # AWS region, set to eu-north-1 (stored in GitHub Secrets)

      # Step 6: Log in to Amazon ECR
      # Uses aws-actions/amazon-ecr-login to authenticate Docker with your ECR registry
      - name: Login to Amazon ECR
        id: login-ecr # Assigns an ID to access the registry URI in later steps
        uses: aws-actions/amazon-ecr-login@v2

      # Step 7: Build and push Docker image to ECR
      # Builds the Docker image from the Dockerfile and pushes it to the ECR repository
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # ECR registry URI (e.g., <your-account-id>.dkr.ecr.eu-north-1.amazonaws.com)
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }} # ECR repository name, set to flutter-web-demo (stored in GitHub Secrets)
          IMAGE_TAG: ${{ github.sha }} # Tags the image with the commit SHA for traceability
        run: |
          # Build the Docker image using the Dockerfile in the repo root
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # Tag the image with both the commit SHA and 'latest' for flexibility
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          # Push both tags to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # Step 8: Update ECS Task Definition
      # Updates the task definition to reference the new Docker image
      - name: Update ECS Task Definition
        id: task-def # Assigns an ID to access the new task definition ARN
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # Reuses the registry URI from Step 6
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }} # Reuses the repository name
          IMAGE_TAG: ${{ github.sha }} # Uses the same commit SHA tag
        run: |
          # Retrieve the current task definition JSON
          TASK_DEF=$(aws ecs describe-task-definition --task-definition flutter-web-demo-task --query 'taskDefinition' --output json)
          # Update the image in the task definition to the new image URI
          NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .registeredAt, .registeredBy)')
          # Register the new task definition and get its ARN
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
          # Output the new ARN for use in the next step
          echo "TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      # Step 9: Update ECS Service
      # Forces a new deployment of the ECS service with the updated task definition
      - name: Update ECS Service
        env:
          ECS_CLUSTER: flutter-portfolio-cluster # Name of your ECS cluster
          ECS_SERVICE: flutter-web-service # Name of your ECS service
        run: |
          # Update the ECS service to use the new task definition and trigger a redeployment
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition ${{ steps.task-def.outputs.TASK_DEF_ARN }} --force-new-deployment